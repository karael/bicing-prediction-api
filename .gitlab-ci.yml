image: docker:latest
services:
- docker:dind

stages:
- test
- build

before_script:
- apk update && apk upgrade
- apk add --update bash curl git gettext openssh python python-dev py-pip build-base openssl wget
- pip install docker-compose

- docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com

- ENVIRONMENT=$(echo $CI_BUILD_REF_NAME | awk -F'/' '{print $1}')
- PRODUCTION_TAG=$(echo $CI_BUILD_REF_NAME | awk -F'/' '{print $2}')
- export PRODUCTION_IMAGE="$CI_REGISTRY_IMAGE:$PRODUCTION_TAG"

.cache_template: &cache
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
    - ./vendor

.quality_assurance_script_template: &quality_assurance_script
  script:
    - cp .env.dist .env
    - docker-compose -f docker-compose.yml up -d
    - docker-compose exec -T api pylint config src
    - docker-compose exec -T api python -m unittest discover src "*Test.py"
    - docker-compose down -v --remove-orphans

.build_script_template: &build_script
  script:
    - cp .env.dist .env
    - docker-compose -f docker-compose.yml up -d
    - docker-compose exec -T api pylint config src
    - docker-compose exec -T api python -m unittest discover src "*Test.py"
    - docker-compose down -v --remove-orphans
    - docker build --target bicing_machine_learning_api -t $PRODUCTION_IMAGE .
    - docker push $PRODUCTION_IMAGE

test:
  <<: *cache
  <<: *quality_assurance_script
  environment: test
  only:
  - /^[F|f]eature\/.*$/
  stage: test

build:
  <<: *build_script
  environment: build
  only:
  - /^[R|r]elease\/.*$/
  - /^[H|h]otfix\/.*$/
  stage: build
